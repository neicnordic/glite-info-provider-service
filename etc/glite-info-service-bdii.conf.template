
# This is the configuration file for the GlueService information provider
# for a BDII

# Many of the entries are commands which will be executed
# using backquotes in perl. They should write to stdout - the return
# code is not relevant except for init and status.

# The init command allows any setup command to be executed
# A non-zero return code will abort the provider
# Environment variables can be set by writing to stdout (x=y)

init = glite-info-service-bdii

# The service type should follow the official list in
# http://glueschema.forge.cnaf.infn.it/V12/ServiceType

service_type = BDII

# This should be a command which returns the service interface version
# in the format 3[.2[.1]] - for BDII just take the major version of the rpm

get_version = rpm -qf $BDII_DIR/sbin/bdii | cut -d- -f2 | cut -d. -f1

# A command to return the service endpoint to stdout (uses variables set
# in the init script)

get_endpoint = echo ldap://$BDII_HOST:$BDII_PORT_READ/$BDII_BIND

# A command to check the status of the service. The status message should be
# returned to stdout - it can be multi-line, the output will be massaged
# and truncated if necessary. 
# The return code should indicate the status:
# 0 = OK, 1 = Critical, 2 = Warning, 3 = Unknown, other = Other

get_status = glite-info-service-test BDII && glite-info-service-status bdii

# The URL of a WSDL document describing the service
# If the string does not start with "http" this will be omitted

WSDL_URL = nohttp://not.a.web.service/

# A URL to a web page defining the service semantics, e.g. a manual
# If the string does not start with "http" this will be omitted

semantics_URL = https://twiki.cern.ch/twiki/bin/view/EGEE/BDII

# StartTime: A command to return the service start time.
# This should be a unix timestamp, the info provider converts it to ISO8601

get_starttime = perl -e '@st=stat($ENV{BDII_PID_FILE});print "@st[10]\n";'

# Owner: this should return a list of owner VO names, one per line
# Null entries will be omitted
# BDII has no access control

get_owner = echo

# A list of AccessControlBaseRule strings to indicate who is allowed to
# have access to the service - at the simplest this is the same as the
# Owner but with the VO names prefixed by "VO:"
# BDII has no access control

get_acbr = echo

# ServiceData entries if any, as a list of key=value pairs
# This will normally call a separate script

get_data = echo

# Associated services - not used here

get_services = echo
