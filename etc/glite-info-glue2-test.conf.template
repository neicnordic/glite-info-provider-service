
# This is a test configuration file for the GLUE2Endpoint publisher

# Many of the entries are commands which will be executed
# using backquotes in perl. They should write to stdout - the return
# code is not relevant except for init and status.

# The init command allows any setup command to be executed
# A non-zero return code will abort the provider
# Environment variables can be set by writing to stdout (x=y)

init = echo GLITE_INFO_GLUE2_TEST=just.testing

# The service type (in fact the EndpointInterfaceName) should for now
# continue to follow the official list for Glue 1 in
# http://glueschema.forge.cnaf.infn.it/V12/ServiceType

service_type = glue2.test.service

# Glue 2 allows extra information to be attached to any object

get_otherinfo = echo -e "Some extra information\n$GLITE_INFO_GLUE2_TEST\nSome more information\nThis contains a non-ASCII character: ausgef√ºhrt"

# A command to return the service endpoint to stdout

get_endpoint = echo https://this.is.a.dummy.endpoint/

# Capabilities are not well-defined yet!

get_capabilities = echo -e "information.model.test\ninformation.model.test2"

# Most services will be "webservice" or nothing

get_technology = echo webservice

# This should be a command which returns the service interface version
# NB in Glue 2 we can have multiple versions

get_version = echo -e "1.0.0\n2.0.0"

# Most services probably don't have interface extensions

get_interfaceextensions = echo

# Web services should have a WSDL and may or may not have a profile

get_WSDL = echo http://some.domain/testservice.wsdl

get_profiles = echo http://some.domain/testservice.profile

# A URL to a web page defining the service semantics, e.g. a manual

get_semantics = echo http://jra1mw.cvs.cern.ch/cgi-bin/jra1mw.cgi/glite-info-provider-service/doc/README?revision=1.17&view=markup

# These three identify the specific implementation as opposed to the generic
# protocol. NB this version is single-valued.

get_implementor = echo Stephen Burke

get_implementationname = echo Glue 2 test configuration

get_implementationversion = echo 1.0.0

# The Quality Level for this endpoint: 1 = development, 2 = testing,
# 3 = pre-production and 4 = production

get_qualitylevel = echo 2

# A command to check the status of the service. The status message should be
# returned to stdout - it can be multi-line, the output will be massaged
# and truncated if necessary. 
# The return code should indicate the status:
# 0 = OK, 1 = Critical, 2 = Warning, 3 = Unknown, other = Other

get_status = glite-info-service-status crond

# The ServingState for this Endpoint: 1 = closed, 2 = draining,
# 3 = queueing, 4 = production (NB "production" has a different meaning
# here to the QualityLevel)

get_servingstate = echo 4

# StartTime: A command to return the service start time.
# This should be a unix timestamp, the info provider converts it to ISO8601

get_starttime = perl -e '@st=stat("/var/run/crond.pid");print "@st[10]\n";'

# Extensions if any, as a list of key=value pairs
# This will normally call a separate script
# 14/7/11: Add a regression test for bug #84373 (duplicate keys)

get_extensions = echo -e "world=disk\nsupport=turtle\nsupport=elephants"

# A list of AccessControlBaseRule strings to indicate who is allowed to
# have access to the service - at the simplest this is the same as the
# Owner but with the VO names prefixed by "VO:"

get_acbr = echo -e "VO:dteam\nVO:ops"

# This effecively corresponds to the Owner in Glue 1; in Glue 2 it becomes
# a list of UserDomain IDs, typically a list of VO names

get_owner = echo -e "dteam\nops"

